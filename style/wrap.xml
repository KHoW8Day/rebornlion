<?xml version="1.0"?>
<!--
Copyright Â© (C) 2012 Emory Hughes Merryman, III!

    This file is part of rebornlion.

    rebornlion is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rebornlion is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml" indent="yes"/>
  <xsl:template match="@*|node()">
    <xsl:copy>
      <xsl:apply-templates select="@*|node()"/>
    </xsl:copy>
  </xsl:template>
  <xsl:template match="paragraph">
    <xsl:call-template name="wrap">
      <xsl:with-param name="mode">
	<xsl:text>2</xsl:text>
      </xsl:with-param>
      <xsl:with-param name="grouping-element">
	<xsl:text>line</xsl:text>
      </xsl:with-param>
      <xsl:with-param name="target-element">
	<xsl:text>word</xsl:text>
      </xsl:with-param>
      <xsl:with-param name="item-element">
	<xsl:text></xsl:text>
      </xsl:with-param>
      <xsl:with-param name="target-index">
	<xsl:text>1</xsl:text>
      </xsl:with-param>
      <xsl:with-param name="item-index">
	<xsl:text>1</xsl:text>
      </xsl:with-param>
      <xsl:with-param name="group-size">
	<xsl:text>80</xsl:text>
      </xsl:with-param>
      <xsl:with-param name="buffer">
	  <xsl:text>0</xsl:text>
      </xsl:with-param>
    </xsl:call-template>
  </xsl:template>
  <xsl:template name="wrap">
    <xsl:param name="mode"/>
    <xsl:param name="grouping-element"/>
    <xsl:param name="target-element"/>
    <xsl:param name="item-element"/>
    <xsl:param name="target-index"/>
    <xsl:param name="item-index"/>
    <xsl:param name="group-size"/>
    <xsl:param name="buffer"/>
    <xsl:variable name="target-count">
      <xsl:value-of select="count(*[$target-element=name()])"/>
    </xsl:variable>
    <xsl:variable name="item-size">
      <xsl:choose>
	<xsl:when test="''=normalize-space($item-element)">
	  <xsl:value-of select="string-length(normalize-space(*[$target-element=name() and $target-index=position()]))"/>
	</xsl:when>
	<xsl:otherwise>
	  <xsl:value-of select="count(*[$target-element=name() and $target-index=position()]/*[$item-element=name()])"/>
	</xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="item-add1">
      <xsl:value-of select="$item-index + $item-size"/>
    </xsl:variable>
    <xsl:variable name="item-add2">
      <xsl:value-of select="$item-add1 + $buffer"/>
    </xsl:variable>
    <xsl:variable name="item-add3">
      <xsl:choose>
	<xsl:when test="1 &lt;= $item-add2 and $item-add2 &lt;= $group-size">
	  <xsl:value-of select="$item-add2"/>
	</xsl:when>
	<xsl:when test="$item-add2 &gt; $group-size">
	  <xsl:text>1</xsl:text>
	</xsl:when>
	<xsl:otherwise>
	  <xsl:message terminate="yes">
	    <xsl:text>WTF</xsl:text>
	  </xsl:message>
	</xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:choose>
      <xsl:when test="$target-index &gt; $target-count">
      </xsl:when>
      <xsl:when test="2=$mode and 1=$item-index">
	<xsl:element name="{$grouping-element}">
	  <xsl:copy-of select="*[$target-element=name() and $target-index=position()]"/>
	  <xsl:call-template name="wrap">
	    <xsl:with-param name="mode">
	      <xsl:text>1</xsl:text>
	    </xsl:with-param>
	    <xsl:with-param name="grouping-element">
	      <xsl:value-of select="$grouping-element"/>
	    </xsl:with-param>
	    <xsl:with-param name="target-element">
	      <xsl:value-of select="$target-element"/>
	    </xsl:with-param>
	    <xsl:with-param name="item-element">
	      <xsl:value-of select="$item-element"/>
	    </xsl:with-param>
	    <xsl:with-param name="target-index">
	      <xsl:value-of select="$target-index + 1"/>
	    </xsl:with-param>
	    <xsl:with-param name="item-index">
	      <xsl:value-of select="$item-add3"/>
	    </xsl:with-param>
	    <xsl:with-param name="group-size">
	      <xsl:value-of select="$group-size"/>
	    </xsl:with-param>
	    <xsl:with-param name="buffer">
	      <xsl:value-of select="$buffer"/>
	    </xsl:with-param>
	  </xsl:call-template>
	</xsl:element>
	<xsl:call-template name="wrap">
	  <xsl:with-param name="mode">
	    <xsl:text>2</xsl:text>
	  </xsl:with-param>
	  <xsl:with-param name="grouping-element">
	    <xsl:value-of select="$grouping-element"/>
	  </xsl:with-param>
	  <xsl:with-param name="target-element">
	    <xsl:value-of select="$target-element"/>
	  </xsl:with-param>
	  <xsl:with-param name="item-element">
	    <xsl:value-of select="$item-element"/>
	  </xsl:with-param>
	  <xsl:with-param name="target-index">
	    <xsl:value-of select="$target-index + 1"/>
	  </xsl:with-param>
	  <xsl:with-param name="item-index">
	    <xsl:value-of select="$item-add3"/>
	  </xsl:with-param>
	  <xsl:with-param name="group-size">
	    <xsl:value-of select="$group-size"/>
	  </xsl:with-param>
	  <xsl:with-param name="buffer">
	    <xsl:value-of select="$buffer"/>
	  </xsl:with-param>
	</xsl:call-template>
      </xsl:when>
      <xsl:when test="1 &lt;= $item-add2 and $item-add2 &lt;= $group-size">
	<xsl:if test="1=$mode">
	  <xsl:copy-of select="*[$target-element=name() and $target-index=position()]"/>
	</xsl:if>
	<xsl:call-template name="wrap">
	  <xsl:with-param name="mode">
	    <xsl:value-of select="$mode"/>
	  </xsl:with-param>
	  <xsl:with-param name="grouping-element">
	    <xsl:value-of select="$grouping-element"/>
	  </xsl:with-param>
	  <xsl:with-param name="target-element">
	    <xsl:value-of select="$target-element"/>
	  </xsl:with-param>
	  <xsl:with-param name="item-element">
	    <xsl:value-of select="$item-element"/>
	  </xsl:with-param>
	  <xsl:with-param name="target-index">
	    <xsl:value-of select="$target-index + 1"/>
	  </xsl:with-param>
	  <xsl:with-param name="item-index">
	    <xsl:value-of select="$item-add3"/>
	  </xsl:with-param>
	  <xsl:with-param name="group-size">
	    <xsl:value-of select="$group-size"/>
	  </xsl:with-param>
	  <xsl:with-param name="buffer">
	    <xsl:value-of select="$buffer"/>
	  </xsl:with-param>
	</xsl:call-template>
      </xsl:when>
      <xsl:when test="$item-add2 &gt; $group-size">
	<xsl:if test="2=$mode">
	  <xsl:call-template name="wrap">
	    <xsl:with-param name="mode">
	      <xsl:value-of select="$mode"/>
	    </xsl:with-param>
	    <xsl:with-param name="grouping-element">
	      <xsl:value-of select="$grouping-element"/>
	    </xsl:with-param>
	    <xsl:with-param name="target-element">
	      <xsl:value-of select="$target-element"/>
	    </xsl:with-param>
	    <xsl:with-param name="item-element">
	      <xsl:value-of select="$item-element"/>
	    </xsl:with-param>
	    <xsl:with-param name="target-index">
	      <xsl:value-of select="$target-index"/>
	    </xsl:with-param>
	    <xsl:with-param name="item-index">
	      <xsl:value-of select="$item-add3"/>
	    </xsl:with-param>
	    <xsl:with-param name="group-size">
	      <xsl:value-of select="$group-size"/>
	    </xsl:with-param>
	    <xsl:with-param name="buffer">
	      <xsl:value-of select="$buffer"/>
	    </xsl:with-param>
	  </xsl:call-template>
	</xsl:if>
      </xsl:when>
      <xsl:otherwise>
	<xsl:message terminate="yes">
	  <xsl:text>WTF</xsl:text>
	</xsl:message>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
</xsl:stylesheet>